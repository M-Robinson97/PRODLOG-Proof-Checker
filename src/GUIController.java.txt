import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.print.PrinterJob;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Tab;
import javafx.scene.input.InputEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.stage.FileChooser;

/**
 * Controller class allowing the user interface to interact with the GUI.
 * @author M. Robinson
 *
 */
public class GUIController {
//C:\Users\M-Rob\OneDrive\Documents\Graduate Study\Birmingham\MSc Project\GITUpload
	/**
	 * Field variables recording the current logic.
	 */
	static final int PROPLOG = 0;
	static final int PREDLOG = 1;
	/**
	 * Field variable which will hold the Proof.
	 */
	static HBox proofPrint = new HBox();
	/**
	 * Current Proof object.
	 */
	static Proof currentProof;
	
	/**
	 * GUIView contains a TabPane containing two Tabs for changing the type of logic. 
	 * This method return an EventHandler for changing the tab, which renders
	 * the PREDLOG buttons visible or invisible depending on the tab pressed, and changes
	 * the internal logic of the Interpreter accordingly.
	 * @param propLog Tab for PROPLOG
	 * @param predLog Tab for PREDLOG
	 * @return EventHandler to handle the clicking of the Tabs.
	 */
	public static EventHandler<Event> changeLogicTab(Tab propLog, Tab predLog){
		EventHandler<Event> changeTab = new EventHandler<Event>() { 
            public void handle(Event e) { 
                if (propLog.isSelected()) { 
                	if(GUIView.getLogic() == PROPLOG) {
                		return;
                	} else {
                		
                		GUIView.setLogic(PROPLOG);
                		Interpreter.setLogic(PROPLOG);
                		//System.out.println("PROPLOG (0): " + GUIView.getLogic());
                		setPredLogButtonsVisible(false);
                		
                	}
                } else if(predLog.isSelected()) {
                	if(GUIView.getLogic() == PREDLOG) {
                		return;
                	} else {
                		GUIView.setLogic(PREDLOG);
                		Interpreter.setLogic(PREDLOG);
                		//System.out.println("currentProof logic: " + currentProof.thisLogic);
                		//System.out.println("PREDLOG (1):" + GUIView.getLogic());
                		setPredLogButtonsVisible(true);
                	}
                }
            } 
        }; 
        return changeTab;
	}
	
	/**
	 * Helper method to set the visibility of the PREDLOG buttons.
	 * @param visible True if they are to be set to visible, false otherwise.
	 */
	public static void setPredLogButtonsVisible(boolean visible) {
		for(Button button : GUIView.getPredLogButtons()) {
			if(visible) {
				button.setVisible(true);
			} else {
				button.setVisible(false);
			}
		}
	}
	
	/**
	 * EventHandler for inserting the text associated with a specific button into the 
	 * input area. Method works by copying the current input text into a StringBuilder,
	 * appending the text to the end, and then setting the input area text to the
	 * String returned by the StringBuilder's toString method.
	 * @param buttonText Text to be appended to the end of the input area.
	 * @return Event handler for inserting at the end of the input area.
	 */
	public static EventHandler<ActionEvent> appendToTextArea(String buttonText){
		EventHandler<ActionEvent> buttonPressed = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) { 
            	StringBuilder returnString = new StringBuilder(GUIView.getUserInputAreaText());
            	returnString.append(buttonText);
            	GUIView.setUserInputAreaText(returnString.toString());
            } 
        }; 
        return buttonPressed;
	}
	
	
	/**
	 * EventHandler for inserting the text associated with a specific button into the 
	 * input area at the position of the cursor. Method works by getting the caret position
	 * and inserting using the TextArea's insertText method to isnert the text at that 
	 * position.
	 *      Thanks to:
	 *      https://alvinalexander.com/source-code/javafx-textarea-how-insert-text-cursor-caret-position/
            for caretPosition 2 lines of code
	 * 
	 * @param buttonText Text to be inserted at the cursor position.
	 * @return Event handler for inserting at the cursor position..
	 */
	public static EventHandler<ActionEvent> appendToCaretTextArea(String buttonText){
		EventHandler<ActionEvent> buttonPressed = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) { 
            	//Thanks to https://alvinalexander.com/source-code/javafx-textarea-how-insert-text-cursor-caret-position/
            	// for caretPosition 2 lines of code
            	int caretPosition = GUIView.getUserInputArea().getCaretPosition();
            	GUIView.getUserInputArea().insertText(caretPosition, buttonText);
            } 
        }; 
        return buttonPressed;
	}
	
	/**
	 * compileLines method returns an EventHandler for the event that the enter button
	 * is pressed in the TextArea. Thanks to 
	 * https://stackoverflow.com/questions/13880638/how-do-i-pick-up-the-enter-key-being-pressed-in-javafx2
     * for how to detect the pressing of the enter button. Method works	by creating a new Proof object
     * using the logic currently stored within the Interpreter. The input lines are then split on the
     * newline character. For each line, the readInput method of the Proof is applied to that line.
     * If an exception is thrown in the process, the syntaxError Label is set to visible and its 
     * text is set to the error message passed up from the Interpreter. Finally, the currentProof
     * is passed to the drawProof method and the result is set as the value of the GUI proofView.
     * Note that a side effect of this is that if there is an error in the Proof, the Proof will
     * end its process and an error message will be displayed. However, the Proof up to the line
     * containing the error will still be displayed. Also note that this means only the first error
     * will be displayed (if there are multiple).
	 * @return EventHandler for the compilation of lines.
	 */
	public static EventHandler<KeyEvent> compileLines(){
		EventHandler<KeyEvent> newlineEntered = new EventHandler<KeyEvent>() {
			public void handle(KeyEvent e) {
				// SNIPPET https://stackoverflow.com/questions/13880638/how-do-i-pick-up-the-enter-key-being-pressed-in-javafx2
				GUIView.syntaxError.setVisible(false);
				if(e.getCode().equals(KeyCode.ENTER)) {
					currentProof = new Proof(Interpreter.thisLogic);
					String[] lines = GUIView.getUserInputAreaText().split("\n");
					
					try {
						
						for(int i = 0; i < lines.length; i++) {
							//ystem.out.println(lines[i]);
							currentProof.readInput(lines[i], GUIView.getLogic());
						}
					
					} catch (IllegalArgumentException exception) {
						String errorMessage = exception.getMessage();
						GUIView.syntaxError.setText(errorMessage);
						GUIView.syntaxError.setVisible(true);
					}
					proofPrint = GUIView.drawProof(currentProof);
					GUIView.proofView.setContent(proofPrint);
					/*
					for(ProofLine line : currentProof.lines) {
						System.out.println(line.getProp().toString());
					}
					*/
				}
			}
		};
		
		return newlineEntered;
	}
	
	/**
	 * EventHandler for saving the TextArea content to a text file on pressing the
	 * save button. Thanks to 
	 * https://www.genuinecoder.com/save-files-javafx-filechooser/
	 * for how to save to a text file.
	 * @return EventHandler for saving the TextArea to a text file.
	 */
	public static EventHandler<MouseEvent> saveProofCommands(){
		EventHandler<MouseEvent> saveProofCommands = new EventHandler<MouseEvent>() {
			public void handle(MouseEvent e) {
				String proofCommands = GUIView.getUserInputAreaText();
				
				// The rest of the code in this method is borrowed from the below:
				// https://www.genuinecoder.com/save-files-javafx-filechooser/
				FileChooser fileChooser = new FileChooser();
				//Set extension filter for text files
				FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("TXT files (*.txt)", "*.txt");
				fileChooser.getExtensionFilters().add(extFilter);
				//Show save file dialog
				File file = fileChooser.showSaveDialog(GUIView.stage);
				if(file != null) {
					try {
						PrintWriter writer;
						writer = new PrintWriter(file);
						writer.println(proofCommands);
						writer.close();
					} catch (IOException ex) {
						Logger.getLogger(GUIController.class.getName()).log(Level.SEVERE, null, ex);
					}
				}
			}
		};
		return saveProofCommands;
	}
	
	/**
	 * Method for loading input from text file into TextArea on pressing of load button.
	 * Thanks to https://www.genuinecoder.com/save-files-javafx-filechooser/
	 * for fileChooser and
	 * // http://tutorials.jenkov.com/java-io/filereader.html
	 * for reading from text file.
	 * @return EventHandler for loading text into TextArea on pressing load button.
	 */
	public static EventHandler<MouseEvent> loadProofCommands(){
		EventHandler<MouseEvent> loadProofCommands = new EventHandler<MouseEvent>() {
			public void handle(MouseEvent e) {
				String proofCommands = GUIView.getUserInputAreaText();
				
				// The rest of the code in this method is borrowed from the below:
				// https://www.genuinecoder.com/save-files-javafx-filechooser/
				FileChooser fileChooser = new FileChooser();
				//Set extension filter for text files
				FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("TXT files (*.txt)", "*.txt");
				fileChooser.getExtensionFilters().add(extFilter);
				//Show save file dialog
				File file = fileChooser.showOpenDialog(GUIView.stage);
				if(file != null) {
					try {
						StringBuilder proofCommandsStringBuilder = new StringBuilder();
						
						// Code for using FileReader borrows heavily from 
						// http://tutorials.jenkov.com/java-io/filereader.html
						FileReader reader = new FileReader(file);
						int data = reader.read();
						while(data != -1) {
							char dataAsChar = (char) data;
							proofCommandsStringBuilder.append(dataAsChar);
							data = reader.read();
						}
						reader.close();
						
						String proofCommandsString = proofCommandsStringBuilder.toString();
						
						GUIView.getUserInputArea().setText(proofCommandsString);
					} catch (IOException ex) {
						Logger.getLogger(GUIController.class.getName()).log(Level.SEVERE, null, ex);
					}
				}
			}
		};
		return loadProofCommands;
	}
	
	/**
	 * Method returning an EventHandler to print a file on pressing of the Print button. Code
	 * used to print borrowed from: 
	 * https://ijavayou.wordpress.com/2016/02/08/javafx-easy-way-to-save-scenesnodes-as-pdf/
	 * @return EventHandler for printing file when print button is pressed.
	 */
	public static EventHandler<MouseEvent> printToPDF(){
		EventHandler<MouseEvent> printToPDF = new EventHandler<MouseEvent>() {
			public void handle(MouseEvent e) {
				//Code for printing to PDF:
				// https://ijavayou.wordpress.com/2016/02/08/javafx-easy-way-to-save-scenesnodes-as-pdf/
				PrinterJob job = PrinterJob.createPrinterJob();
				
				 if(job != null){
				   job.showPrintDialog(GUIView.getStage()); // Window must be your main Stage
				   job.printPage(proofPrint);
				   job.endJob();
				 }
				
			}
		};
		return printToPDF;
	}
}
